#!/usr/bin/env bash

# Change working directory
cd -- "$(
  dirname "${0}"
)"

# UI constants
COLOUR_NEGATIVE='\033[1;31m'
COLOUR_POSITIVE='\033[1;32m'
COLOUR_RESET='\033[0m'
CHARACTER_STEP='--->'
PREFIX_STEP=$(
	printf -- \
		'%s ' \
		"${CHARACTER_STEP}"
)
PREFIX_SUB_STEP=$(
	printf -- \
		' %s ' \
		"${CHARACTER_STEP}"
)
PREFIX_STEP_NEGATIVE=$(
	printf -- \
		'%b%s%b' \
		"${COLOUR_NEGATIVE}" \
		"${PREFIX_STEP}" \
		"${COLOUR_RESET}"
)
PREFIX_STEP_POSITIVE=$(
	printf -- \
		'%b%s%b' \
		"${COLOUR_POSITIVE}" \
		"${PREFIX_STEP}" \
		"${COLOUR_RESET}"
)
PREFIX_SUB_STEP_NEGATIVE=$(
	printf -- \
		'%b%s%b' \
		"${COLOUR_NEGATIVE}" \
		"${PREFIX_SUB_STEP}" \
		"${COLOUR_RESET}"
)
PREFIX_SUB_STEP_POSITIVE=$(
	printf -- \
		'%b%s%b' \
		"${COLOUR_POSITIVE}" \
		"${PREFIX_SUB_STEP}" \
		"${COLOUR_RESET}"
)

# Default settings
INSTALL_SERVICE_COMMAND=install
INSTALL_SERVICE_PACKAGE_NAME=scmi
INSTALL_SERVICE_INCLUDE_FILES="
 environment.sh
 default.sh
 service-unit.sh
"
INSTALL_SERVICE_MANAGER_TYPE=docker
INSTALL_SERVICE_REGISTER_ENABLED=false

# Source include files
for INCLUDE_FILE in ${INSTALL_SERVICE_INCLUDE_FILES}; do
	if [[ -f ${INCLUDE_FILE} ]]; then
		source ${INCLUDE_FILE}
	elif [[ -f ../../opt/${INSTALL_SERVICE_PACKAGE_NAME}/${INCLUDE_FILE} ]]; then
		source ../../opt/${INSTALL_SERVICE_PACKAGE_NAME}/${INCLUDE_FILE}
	elif [[ -f /opt/${INSTALL_SERVICE_PACKAGE_NAME}/${INCLUDE_FILE} ]]; then
		source /opt/${INSTALL_SERVICE_PACKAGE_NAME}/${INCLUDE_FILE}
	fi
done

function docker_create ()
{
	docker_require_container_not

	echo "${PREFIX_STEP} Creating container"

	(
		eval "set -x; \
			${docker} create \
			${DOCKER_CONTAINER_PARAMETERS} \
			${DOCKER_CONTAINER_PARAMETERS_APPEND} \
			${DOCKER_USER}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} \
			1> /dev/null;"
	)

	if [[ -n $(${docker} ps -aq --filter "name=${DOCKER_NAME}" --filter "status=created") ]]; then
		echo "${PREFIX_SUB_STEP} $(${docker} ps -aq --filter "name=${DOCKER_NAME}" --filter "status=created")"
		echo "${PREFIX_SUB_STEP_POSITIVE} Container created"
	else
		echo "${PREFIX_SUB_STEP_NEGATIVE} Container creation failed"
		exit 1
	fi
}

function docker_install ()
{
	docker_prerequisites

	# Cleanup if interrupted, killed or on exit
	trap docker_install_cleanup \
		INT TERM EXIT

	docker_terminate
	docker_create
	docker_start

	trap - \
		INT TERM EXIT
}

function docker_install_cleanup ()
{
	docker_uninstall
	exit 1
}

function docker_prerequisites ()
{
	docker=''

	declare -a local DOCKER_PATHS=(
		'/usr/bin/docker'
		'/usr/local/bin/docker'
	)

	# Set the docker binary command
	if [[ ${DOCKER_CHROOT_DIRECTORY} == / ]]; then
		if ! command -v docker &> /dev/null; then
			printf -- \
				"${PREFIX_STEP_NEGATIVE} %s\n" \
				'ERROR: Missing docker binary'
			exit 1
		fi

		printf -v \
			docker \
			-- '%s' \
			$(command -v docker)
	else
		for DOCKER_PATH in "${DOCKER_PATHS[@]}"; do
			if [[ -f ${DOCKER_CHROOT_DIRECTORY%*/}/${DOCKER_PATH} ]]; then
				printf -v \
					docker \
					-- 'chroot %s %s' \
					"${DOCKER_CHROOT_DIRECTORY}" \
					${DOCKER_PATH}
				break
			fi
		done

		if [[ -z ${docker} ]]; then
			printf -- \
				"${PREFIX_STEP_NEGATIVE} %s\n" \
				'ERROR: Missing docker binary'
			exit 1
		fi
	fi

	# Test docker connection
	if [[ -z $(${docker} info) ]]; then
		printf -- \
			"${PREFIX_STEP_NEGATIVE} %s\n" \
			'ERROR: Docker failed to connect to host.'
		exit 1
	fi

	if ! is_valid_managed_docker_name "${DOCKER_NAME}"; then
		printf -- \
			"${PREFIX_STEP_NEGATIVE} ERROR: Invalid DOCKER_NAME %s\n" \
			"${DOCKER_NAME}"
		printf -- \
			"${PREFIX_SUB_STEP_NEGATIVE} Please use the form: %s\n" \
			'[name](.group).[local-instance].[node-instance]'

		exit 1
	fi
}

# Deleting a container from host from a container that has the docker host's
# root directory volume mounted fails for CentOS hosts. To work around this
# issue we unmount the shm mount before calling docker rm.
function docker_release_host_mounted_container ()
{
	# Skip if not applicable case.
	if [[ -z ${DOCKER_CHROOT_DIRECTORY} ]] 
		|| [[ ${DOCKER_CHROOT_DIRECTORY} == / ]]; then
		return 0
	fi

	docker_prerequisites

	if [[ -n $(${docker} ps -aq --filter "name=${DOCKER_NAME}") ]]; then
		CONTAINER_ID=$(
			${docker} inspect --format="{{.Id}}" ${DOCKER_NAME}
		)
		CONTAINER_SHM_MOUNT=$(
			find \
				"${DOCKER_CHROOT_DIRECTORY%*/}/var/lib/docker/containers/${CONTAINER_ID}" \
				-type d \
				-name "shm" \
				2> /dev/null
		)

		if [[ -n ${CONTAINER_ID} ]] && [[ -n ${CONTAINER_SHM_MOUNT} ]]; then
			printf -- \
				"${PREFIX_SUB_STEP} Unmounting container id: %s\n" \
				${CONTAINER_ID}

			umount "${DOCKER_CHROOT_DIRECTORY%*/}/var/lib/docker/containers/${CONTAINER_ID}/shm"
		fi
	fi
}

function docker_require_container ()
{
	if [[ -z $(${docker} ps -aq --filter "name=${DOCKER_NAME}") ]]; then
		echo "${PREFIX_STEP_NEGATIVE} This operation requires the ${DOCKER_NAME} docker container."
		exit 1
	fi
}

function docker_require_container_not ()
{
	if [[ -n $(${docker} ps -aq --filter "name=${DOCKER_NAME}") ]]; then
		echo "${PREFIX_STEP_NEGATIVE} This operation requires the ${DOCKER_NAME} docker container be removed (or renamed)."
		echo "${PREFIX_SUB_STEP} Try removing it with: docker rm -f ${DOCKER_NAME}"
		exit 1
	fi
}

function docker_require_container_not_status_paused ()
{
	if [[ -n $(${docker} ps -aq --filter "name=${DOCKER_NAME}" --filter "status=paused") ]]; then
		echo "${PREFIX_STEP_NEGATIVE} This operation requires the ${DOCKER_NAME} docker container to be unpaused."
		echo "${PREFIX_SUB_STEP} Try unpausing it with: docker ${DOCKER_NAME} unpause"
		exit 1
	fi
}

function docker_start ()
{
	docker_require_container
	docker_require_container_not_status_paused

	echo "${PREFIX_STEP} Starting container"

	if [[ -n $(${docker} ps -aq --filter "name=${DOCKER_NAME}") ]] \
		&& [[ -z $(${docker} ps -aq --filter "name=${DOCKER_NAME}" --filter "status=running") ]]; then
		${docker} start ${DOCKER_NAME} 1> /dev/null
	fi

	if [[ -n $(${docker} ps -aq --filter "name=${DOCKER_NAME}" --filter "status=running") ]]; then
		echo "${PREFIX_SUB_STEP_POSITIVE} Container started"
	else
		echo "${PREFIX_SUB_STEP_NEGATIVE} Container start failed"
		exit 1
	fi
}

function docker_terminate ()
{
	if [[ -z $(${docker} ps -aq --filter "name=${DOCKER_NAME}") ]]; then
		echo "${PREFIX_STEP} Container termination skipped"
	else
		echo "${PREFIX_STEP} Terminating container"
		if [[ -n $(${docker} ps -aq --filter "name=${DOCKER_NAME}" --filter "status=paused") ]]; then
			echo "${PREFIX_SUB_STEP} Unpausing container"
			${docker} unpause ${DOCKER_NAME} 1> /dev/null
		fi

		if [[ -n $(${docker} ps -aq --filter "name=${DOCKER_NAME}" --filter "status=running") ]]; then
			echo "${PREFIX_SUB_STEP} Stopping container"
			${docker} stop ${DOCKER_NAME} 1> /dev/null
		fi

		if [[ -n $(${docker} ps -aq --filter "name=${DOCKER_NAME}") ]]; then
			echo "${PREFIX_SUB_STEP} Removing container"

			docker_release_host_mounted_container

			${docker} rm -f ${DOCKER_NAME} 1> /dev/null
		fi

		if [[ -z $(${docker} ps -aq --filter "name=${DOCKER_NAME}") ]] \
			&& [[ -z $(find ${DOCKER_CHROOT_DIRECTORY%*/}/var/lib/docker/containers -type d -name "${CONTAINER_ID}" 2> /dev/null) ]]; then
			echo "${PREFIX_SUB_STEP_POSITIVE} Container terminated"
		else
			echo "${PREFIX_SUB_STEP_NEGATIVE} Container termination failed"
			exit 1
		fi
	fi
}

function docker_uninstall ()
{
	docker_prerequisites
	docker_terminate
}

# Require a docker name of the form:
# [name](.group).[local-instance].[node-instance]
is_valid_managed_docker_name ()
{
	local NAME="${1:-}"
	local NAME_PATTERN='^[a-zA-Z0-9][a-zA-Z0-9_.-]*\.[0-9][0-9]*\.[0-9][0-9]*$'

	if [[ -z ${NAME} ]]; then
		return 1
	fi

	if [[ ${NAME} =~ ${NAME_PATTERN} ]]; then
		return 0
	fi

	return 1
}

function systemd_get_unit_file_path ()
{
	local UNIT_FILE="${1:-}"
	local UNIT_FILE_PATH=""
	local TEMPLATE_PATHS="
	 .
	 ./etc/systemd/system
	 /etc/systemd/system
	"

	if [[ -z ${UNIT_FILE} ]]; then
		printf -- \
			"${PREFIX_STEP_NEGATIVE} ERROR: Missing unit file name.\n"
		exit 1
	fi

	for TEMPLATE_PATH in ${TEMPLATE_PATHS}; do
		if [[ -f ${TEMPLATE_PATH}/${UNIT_FILE} ]]; then
			UNIT_FILE_PATH=${TEMPLATE_PATH}/${UNIT_FILE}
			break
		fi
	done

	if [[ -z ${UNIT_FILE_PATH} ]]; then
		printf -- \
			"${PREFIX_STEP_NEGATIVE} ERROR: Cannot locate unit file: %s\n" \
			"${UNIT_FILE}"
		exit 1
	fi

	printf -- \
		'%s' \
		"${UNIT_FILE_PATH}"
}

function systemd_install ()
{
	systemd_prerequisites

	# Cleanup if interrupted, killed or on exit
	trap systemd_install_cleanup \
		INT TERM EXIT

	printf -- \
		"${PREFIX_STEP} Installing %s\n" \
		${SERVICE_UNIT_INSTANCE_NAME}

	# Copy systemd unit-files into place.
	set -e
	cat \
		"$(systemd_get_unit_file_path "${DOCKER_IMAGE_NAME}@.service")" \
		> "${DOCKER_CHROOT_DIRECTORY%*/}/etc/systemd/system/${SERVICE_UNIT_TEMPLATE_NAME}"
	set +e

	if [[ ${INSTALL_SERVICE_REGISTER_ENABLED} == true ]]; then
		set -e
		sed \
			-e "s~{{SERVICE_UNIT_NAME}}~${SERVICE_UNIT_NAME}~g" \
			"$(systemd_get_unit_file_path "${DOCKER_IMAGE_NAME}.register@.service")" \
			> "${DOCKER_CHROOT_DIRECTORY%*/}/etc/systemd/system/${SERVICE_UNIT_REGISTER_TEMPLATE_NAME}"
		set +e
	else
		# Remove register service unit template if found on host.
		if [[ -f ${DOCKER_CHROOT_DIRECTORY%*/}/etc/systemd/system/${SERVICE_UNIT_REGISTER_TEMPLATE_NAME} ]]; then
			rm -f "${DOCKER_CHROOT_DIRECTORY%*/}/etc/systemd/system/${SERVICE_UNIT_REGISTER_TEMPLATE_NAME}"
		fi
	fi

	# Create drop-in to set environment variables defined at install time.
	if [[ -n ${SERVICE_UNIT_ENVIRONMENT_KEYS} ]]; then

		printf \
			-v SYSTEMD_OVERRIDE_DIRECTORY \
			-- '%s/etc/systemd/system/%s.d' \
			"${DOCKER_CHROOT_DIRECTORY%*/}" \
			"${SERVICE_UNIT_TEMPLATE_NAME}"

		SYSTEMD_OVERRIDE_FILE=10-override.conf

		mkdir -p "${SYSTEMD_OVERRIDE_DIRECTORY}"

		cat <<-EOF > "${SYSTEMD_OVERRIDE_DIRECTORY}/${SYSTEMD_OVERRIDE_FILE}"
		[Service]
		EOF

		# Set each key and value - escaping any % characters.
		for KEY in ${SERVICE_UNIT_ENVIRONMENT_KEYS}; do
			VALUE="${!KEY//%/%%}"

			# Allow variable expansion for DOCKER_CONTAINER_PARAMETERS_APPEND
			if [[ ${KEY} == DOCKER_CONTAINER_PARAMETERS_APPEND ]]; then
				printf \
					-- 'Environment="%s"\n' \
					"$(
						eval -- \
						echo \
							"${KEY}=${VALUE}"
					)" \
					>> "${SYSTEMD_OVERRIDE_DIRECTORY}/${SYSTEMD_OVERRIDE_FILE}"
			else
				printf \
					-- 'Environment="%s=%s"\n' \
					"${KEY}" \
					"${VALUE}" \
					>> "${SYSTEMD_OVERRIDE_DIRECTORY}/${SYSTEMD_OVERRIDE_FILE}"
			fi
		done

	fi

	${systemctl} daemon-reload
	${systemctl} enable -f ${SERVICE_UNIT_INSTANCE_NAME}
	if [[ ${INSTALL_SERVICE_REGISTER_ENABLED} == true ]]; then
		${systemctl} enable -f ${SERVICE_UNIT_REGISTER_INSTANCE_NAME}
	elif ${systemctl} -q is-active ${SERVICE_UNIT_REGISTER_INSTANCE_NAME}; then
		${systemctl} disable -f ${SERVICE_UNIT_REGISTER_INSTANCE_NAME}
		${systemctl} stop ${SERVICE_UNIT_REGISTER_INSTANCE_NAME}
	fi

	docker_release_host_mounted_container

	${systemctl} restart ${SERVICE_UNIT_INSTANCE_NAME} &
	PIDS[0]=${!}

	# Tail the systemd unit logs unitl installation completes
	${journalctl} -fn 0 -u ${SERVICE_UNIT_INSTANCE_NAME} &
	PIDS[1]=${!}

	# Wait for installtion to complete
	[[ -n ${PIDS[0]} ]] && wait ${PIDS[0]}

	# Allow time for the container bootstrap to complete
	sleep ${SERVICE_UNIT_INSTALL_TIMEOUT}
	kill -15 ${PIDS[1]}
	wait ${PIDS[1]} 2> /dev/null

	if ${systemctl} -q is-active ${SERVICE_UNIT_INSTANCE_NAME} \
		&& ( \
			[[ ${INSTALL_SERVICE_REGISTER_ENABLED} != true ]] \
			|| ${systemctl} -q is-active ${SERVICE_UNIT_REGISTER_INSTANCE_NAME} \
		); then

		printf -- \
			"${PREFIX_STEP} Service unit is active: %s\n" \
			"$(
				${systemctl} list-units --type=service \
				| grep "^[ ]*${SERVICE_UNIT_INSTANCE_NAME}"
			)"

		if [[ ${INSTALL_SERVICE_REGISTER_ENABLED} == true ]]; then
			printf -- \
				"${PREFIX_STEP} Service register unit is active: %s\n" \
				"$(
					${systemctl} list-units --type=service \
					| grep "^[ ]*${SERVICE_UNIT_REGISTER_INSTANCE_NAME}"
				)"
		else
			printf -- \
				"${PREFIX_STEP} Service register unit is disabled (not installed)\n"
		fi

		printf -- \
			"${PREFIX_SUB_STEP_POSITIVE} %s\n" \
			'Install complete'
	else
		printf -- \
			"\nService status:\n"
		${systemctl} status -ln 50 ${SERVICE_UNIT_INSTANCE_NAME}
		printf -- \
			"\n${PREFIX_SUB_STEP_NEGATIVE} %s\n" \
			'Install error'
	fi

	trap - \
		INT TERM EXIT
}

function systemd_install_cleanup ()
{
	systemd_uninstall
	exit 1
}

function systemd_prerequisites ()
{
	local COMMAND
	declare -a local COMMAND_PATHS=(
		'/usr/bin/docker'
		'/usr/bin/systemctl'
		'/usr/bin/journalctl'
	)

	if [[ ${DOCKER_CHROOT_DIRECTORY} == / ]]; then
		for COMMAND_PATH in "${COMMAND_PATHS[@]}"; do
			COMMAND=${COMMAND_PATH##*/}
			if ! command -v ${COMMAND} &> /dev/null; then
				printf -- \
					"${PREFIX_STEP_NEGATIVE} ERROR: Missing required command: %s\n" \
					${COMMAND_PATH}
				exit 1
			fi

			printf -v \
				${COMMAND} \
				-- '%s' \
				${COMMAND_PATH}
		done
	else
		for COMMAND_PATH in "${COMMAND_PATHS[@]}"; do
			COMMAND=${COMMAND_PATH##*/}
			if [[ ! -f ${DOCKER_CHROOT_DIRECTORY%*/}/${COMMAND_PATH} ]]; then
				printf -- \
					"${PREFIX_STEP_NEGATIVE} ERROR: Missing required command: %s\n" \
					${COMMAND_PATH}
				exit 1
			fi

			printf -v \
				${COMMAND} \
				-- 'chroot %s %s' \
				"${DOCKER_CHROOT_DIRECTORY}" \
				${COMMAND_PATH}
		done
	fi

	systemd_set_service_unit_names
}

function systemd_set_service_unit_names ()
{
	if is_valid_managed_docker_name "${DOCKER_NAME}"; then
		SERVICE_UNIT_NAME=$(
			expr match \
				"${DOCKER_NAME}" \
				'\([^\.]*\.*[^\.]*\)\.[0-9][0-9]*\.[0-9][0-9]*'
		)
		SERVICE_UNIT_INSTANCE=$(
			expr match \
				"${DOCKER_NAME}" \
				'.*\.\([0-9][0-9]*\.[0-9][0-9]*\)'
		)
	else
		printf -- \
			"${PREFIX_STEP_NEGATIVE} ERROR: Invalid DOCKER_NAME %s\n" \
			"${DOCKER_NAME}"
		printf -- \
			"${PREFIX_SUB_STEP_NEGATIVE} Please use the form: %s\n" \
			'[name](.group).[local-instance].[node-instance]'

		exit 1
	fi

	SERVICE_UNIT_TEMPLATE_NAME=${SERVICE_UNIT_NAME}@.service
	SERVICE_UNIT_INSTANCE_NAME=${SERVICE_UNIT_NAME}@${SERVICE_UNIT_INSTANCE}.service

	SERVICE_UNIT_REGISTER_TEMPLATE_NAME=${SERVICE_UNIT_NAME}.register@.service
	SERVICE_UNIT_REGISTER_INSTANCE_NAME=${SERVICE_UNIT_NAME}.register@${SERVICE_UNIT_INSTANCE}.service
}

function systemd_uninstall ()
{
	systemd_prerequisites

	printf -- \
		"${PREFIX_STEP} Uninstalling %s\n" \
		${SERVICE_UNIT_INSTANCE_NAME}

	${systemctl} daemon-reload
	${systemctl} disable -f ${SERVICE_UNIT_INSTANCE_NAME} 2> /dev/null
	if ${systemctl} -q is-active ${SERVICE_UNIT_INSTANCE_NAME}; then
		${systemctl} stop ${SERVICE_UNIT_INSTANCE_NAME}
	fi

	${systemctl} disable -f ${SERVICE_UNIT_REGISTER_INSTANCE_NAME} 2> /dev/null
	if ${systemctl} -q is-active ${SERVICE_UNIT_REGISTER_INSTANCE_NAME}; then
		${systemctl} stop ${SERVICE_UNIT_REGISTER_INSTANCE_NAME}
	fi

	# Remove Drop-In file
	printf \
		-v SYSTEMD_OVERRIDE_DIRECTORY \
		-- '%s/etc/systemd/system/%s.d' \
		"${DOCKER_CHROOT_DIRECTORY%*/}" \
		"${SERVICE_UNIT_TEMPLATE_NAME}"

	if [[ -d ${SYSTEMD_OVERRIDE_DIRECTORY} ]]; then
		rm -rf "${SYSTEMD_OVERRIDE_DIRECTORY}"
	fi

	# Remove systemd unit-files.
	for UNIT_FILE in ${SERVICE_UNIT_TEMPLATE_NAME} ${SERVICE_UNIT_REGISTER_TEMPLATE_NAME}; do
		if [[ -f ${DOCKER_CHROOT_DIRECTORY%*/}/etc/systemd/system/${UNIT_FILE} ]]; then
			rm -f "${DOCKER_CHROOT_DIRECTORY%*/}/etc/systemd/system/${UNIT_FILE}"
		fi
	done

	${systemctl} daemon-reload

	# Remove stopped container
	docker_terminate

	printf -- \
		"${PREFIX_SUB_STEP_POSITIVE} %s\n" \
		'Uninstall complete'
}

function usage ()
{
	cat <<-EOF
	Usage: $(basename $0) [OPTIONS] COMMAND

	Options:
	  -h --help                  Show this help.
	  -m --manager=MANAGER       Container manager (docker, systemd).
	  -r --register              Enable the etcd registration service. This option 
	                             is applicable to systemd manager only.
	Commands:
	  install                    Default - Install, create and start the container 
	                             and any supporting files.
	  uninstall                  Stop, remove (terminate) and uninstall the 
	                             container and any supporting files.
	EOF

	exit 1
}

# Abort if not run by root user or with sudo
if [[ ${EUID} -ne 0 ]]; then
	printf -- \
		"${PREFIX_STEP_NEGATIVE} %s\n" \
		'Run as root or use: sudo -E <command>'
	exit 1
fi

if [[ -z ${DOCKER_CHROOT_DIRECTORY} ]]; then
	printf -- \
		"${PREFIX_STEP_NEGATIVE} %s\n" \
		'ERROR: CHROOT_DIRECTORY not set.'
	exit 1
elif [[ ! -d ${DOCKER_CHROOT_DIRECTORY} ]]; then
	printf -- \
		"${PREFIX_STEP_NEGATIVE} %s\n" \
		'ERROR: CHROOT_DIRECTORY not a valid directory.'
	exit 1
fi

# Parse install options
while [[ ${#} -gt 0 ]]; do
	case "${1}" in
		-h|--help)
			usage
			;;
		-m)
			if [[ ${2:-} != docker ]] && [[ ${2:-} != systemd ]]; then
				usage
			fi

			INSTALL_SERVICE_MANAGER_TYPE=${2}
			shift 2
			;;
		--manager=*)
			if [[ ${1#*=} != docker ]] && [[ ${1#*=} != systemd ]]; then
				usage
			fi

			INSTALL_SERVICE_MANAGER_TYPE=${1#*=}
			shift 1
			;;
		-r|--register)
			INSTALL_SERVICE_REGISTER_ENABLED=true
			shift 1
			;;
		install|uninstall)
			INSTALL_SERVICE_COMMAND=${1}
			break
			;;
		*)
			printf -- \
				"${PREFIX_STEP_NEGATIVE} %s (%s)\n" \
				'ERROR: Unkown option' \
				"${1}"
			usage
			;;
	esac
done

# Run command for selected service manager
case ${INSTALL_SERVICE_MANAGER_TYPE} in
	systemd)
		systemd_${INSTALL_SERVICE_COMMAND}
		;;
	docker|*)
		docker_${INSTALL_SERVICE_COMMAND}
		;;
esac
