# -----------------------------------------------------------------------------
# Naming convention:
#
#    ssh.pool-1@.service = {service-unit-template-name}
#     |    |
#     |    +----------- {service-unit-group-name}
#     +---------------- {service-unit-name}
#
#    ssh.pool-1@1.1.service = {service-unit-instance-name}
#     |    |    | |
#     |    |    | +---- {service-unit-instance}
#     |    |    +------ {service-unit-local-id}
#     |    +----------- {service-unit-group-name}
#     +---------------- {service-unit-name}
#
#    ssh.pool-1.1.1 = {service-unit-long-name}
#     |    |    | |
#     |    |    | +---- {service-unit-instance}
#     |    |    +------ {service-unit-local-id}
#     |    +----------- {service-unit-group-name}
#     +---------------- {service-unit-name}
#
# To install:
#     sudo cp {service-unit-template-name} /etc/systemd/system/
#     sudo systemctl daemon-reload
#
# Start using:
#     sudo systemctl [start|stop|restart|kill|status] {service-unit-instance-name}
#
# Persist system reboot:
#     sudo systemctl enable -f {service-unit-instance-name}
#
# Debugging:
#     sudo systemctl status {service-unit-instance-name}
#     journalctl -fn 50 -u {service-unit-instance-name}
#
# To uninstall:
#     sudo systemctl disable -f {service-unit-instance-name}
#     sudo systemctl stop {service-unit-instance-name}
#     sudo rm /etc/systemd/system/{service-unit-template-name}
#     sudo docker rm -f {service-unit-long-name}
# -----------------------------------------------------------------------------

[Unit]
Description=centos-ssh // %p.%i
Requires=docker.service
Wants=etcd.service
Wants=etcd2.service
Wants=register-%p@%i.service
After=etcd.service
After=etcd2.service
After=docker.service

[Service]
Restart=on-failure
RestartSec=30
TimeoutStartSec=1200
KillMode=none
Environment="DOCKER_IMAGE_PACKAGE_PATH=/var/services-packages"
Environment="DOCKER_IMAGE_NAME=jdeathe/centos-ssh"
Environment="DOCKER_IMAGE_TAG=centos-7-2.0.1"
Environment="DOCKER_PORT_MAP_TCP_22=2020"
Environment="VOLUME_CONFIG_ENABLED=false"
Environment="VOLUME_CONFIG_NAMED=false"
Environment="VOLUME_CONFIG_NAME=volume-config.%p.%i"
Environment="VOLUME_DATA_NAME=volume-data.%p.%i"
Environment="SSH_AUTHORIZED_KEYS=ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key"
Environment="SSH_AUTOSTART_SSHD=true"
Environment="SSH_AUTOSTART_SSHD_BOOTSTRAP=true"
Environment="SSH_CHROOT_DIRECTORY=%h"
Environment="SSH_INHERIT_ENVIRONMENT=false"
Environment="SSH_SUDO=ALL=(ALL) ALL"
Environment="SSH_USER=app-admin"
Environment="SSH_USER_FORCE_SFTP=false"
Environment="SSH_USER_HOME=/home/%%u"
Environment="SSH_USER_PASSWORD="
Environment="SSH_USER_PASSWORD_HASHED=false"
Environment="SSH_USER_SHELL=/bin/bash"
Environment="SSH_USER_ID=500:500"

# Initialisation: Load image from local storage if available, otherwise pull.
ExecStartPre=/bin/bash -c \
  "if [[ -z $( if [[ -n $(/usr/bin/docker images -q ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}) ]]; then echo $(/usr/bin/docker images -q ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}); else echo $(/usr/bin/docker images -q docker.io/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}); fi; ) ]]; then \
    if [[ -f ${DOCKER_IMAGE_PACKAGE_PATH}/${DOCKER_IMAGE_NAME}.${DOCKER_IMAGE_TAG}.tar.xz ]]; then \
      /usr/bin/xz -dc ${DOCKER_IMAGE_PACKAGE_PATH}/${DOCKER_IMAGE_NAME}.${DOCKER_IMAGE_TAG}.tar.xz | /usr/bin/docker load; \
    else \
      /usr/bin/docker pull ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}; \
    fi; \
  fi"

# Create a data container for the configuration volume
ExecStartPre=/bin/bash -c \
  "if [[ ${VOLUME_CONFIG_ENABLED} == true ]] && [[ ${VOLUME_CONFIG_NAMED} == true ]]; then \
    if [[ -z $(/usr/bin/docker ps -aq --filter \"name=${VOLUME_CONFIG_NAME}\") ]]; then \
      /usr/bin/docker run \
        --name ${VOLUME_CONFIG_NAME}.tmp \
        ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} \
        /bin/sh -c 'while true; do echo -ne .; sleep 1; done'; \
      /usr/bin/docker run \
        --name ${VOLUME_CONFIG_NAME} \
        -v ${VOLUME_CONFIG_NAME}:/etc/services-config \
        ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} \
        /bin/true; \
      /usr/bin/docker cp ${VOLUME_CONFIG_NAME}.tmp:/etc/services-config/. \
        /var/lib/docker/volumes/${VOLUME_CONFIG_NAME}/_data; \
      /usr/bin/docker kill ${VOLUME_CONFIG_NAME}.tmp; \
    fi; \
  elif [[ ${VOLUME_CONFIG_ENABLED} == true ]] && [[ ${VOLUME_CONFIG_NAMED} != true ]]; then \
    if [[ -z $(/usr/bin/docker ps -aq --filter \"name=${VOLUME_CONFIG_NAME}\") ]]; then \
      /usr/bin/docker run \
        --name ${VOLUME_CONFIG_NAME} \
        -v /etc/services-config \
        ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} \
        /bin/true; \
    fi; \
  fi"

# Terminate existing container to allow for redeployment
ExecStartPre=/bin/bash -c \
  "if [[ -n $(/usr/bin/docker ps -aq --filter \"name=%p.%i\") ]]; then \
    if [[ -n $(/usr/bin/docker ps -aq --filter \"name=%p.%i\" --filter \"status=paused\") ]]; then \
      /usr/bin/docker unpause %p.%i; \
    fi; \
    if [[ -n $(/usr/bin/docker ps -aq --filter \"name=%p.%i\" --filter \"status=running\") ]]; then \
      /usr/bin/docker stop %p.%i; \
    fi; \
    if [[ -n $(/usr/bin/docker ps -aq --filter \"name=%p.%i\") ]]; then \
      /usr/bin/docker rm -f %p.%i; \
    fi; \
  fi"

# Startup
ExecStart=/bin/bash -c \
  "if [[ -n $(/usr/bin/docker ps -aq --filter \"name=${VOLUME_CONFIG_NAME}\") ]]; then \
    /usr/bin/docker run \
      --name %p.%i \
      -p $(( ${DOCKER_PORT_MAP_TCP_22} + $(/usr/bin/awk -F. '$0=$1' <<< %i) - 1 )):22 \
      --env \"SSH_AUTHORIZED_KEYS=${SSH_AUTHORIZED_KEYS}\" \
      --env \"SSH_AUTOSTART_SSHD=${SSH_AUTOSTART_SSHD}\" \
      --env \"SSH_AUTOSTART_SSHD_BOOTSTRAP=${SSH_AUTOSTART_SSHD_BOOTSTRAP}\" \
      --env \"SSH_CHROOT_DIRECTORY=${SSH_CHROOT_DIRECTORY}\" \
      --env \"SSH_INHERIT_ENVIRONMENT=${SSH_INHERIT_ENVIRONMENT}\" \
      --env \"SSH_SUDO=${SSH_SUDO}\" \
      --env \"SSH_USER=${SSH_USER}\" \
      --env \"SSH_USER_FORCE_SFTP=${SSH_USER_FORCE_SFTP}\" \
      --env \"SSH_USER_HOME=${SSH_USER_HOME}\" \
      --env \"SSH_USER_PASSWORD=${SSH_USER_PASSWORD}\" \
      --env \"SSH_USER_PASSWORD_HASHED=${SSH_USER_PASSWORD_HASHED}\" \
      --env \"SSH_USER_SHELL=${SSH_USER_SHELL}\" \
      --env \"SSH_USER_ID=${SSH_USER_ID}\" \
      --volumes-from volume-config.%p.%i \
      ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}; \
  else \
    /usr/bin/docker run \
      --name %p.%i \
      -p $(( ${DOCKER_PORT_MAP_TCP_22} + $(/usr/bin/awk -F. '$0=$1' <<< %i) - 1 )):22 \
      --env \"SSH_AUTHORIZED_KEYS=${SSH_AUTHORIZED_KEYS}\" \
      --env \"SSH_AUTOSTART_SSHD=${SSH_AUTOSTART_SSHD}\" \
      --env \"SSH_AUTOSTART_SSHD_BOOTSTRAP=${SSH_AUTOSTART_SSHD_BOOTSTRAP}\" \
      --env \"SSH_CHROOT_DIRECTORY=${SSH_CHROOT_DIRECTORY}\" \
      --env \"SSH_INHERIT_ENVIRONMENT=${SSH_INHERIT_ENVIRONMENT}\" \
      --env \"SSH_SUDO=${SSH_SUDO}\" \
      --env \"SSH_USER=${SSH_USER}\" \
      --env \"SSH_USER_FORCE_SFTP=${SSH_USER_FORCE_SFTP}\" \
      --env \"SSH_USER_HOME=${SSH_USER_HOME}\" \
      --env \"SSH_USER_PASSWORD=${SSH_USER_PASSWORD}\" \
      --env \"SSH_USER_PASSWORD_HASHED=${SSH_USER_PASSWORD_HASHED}\" \
      --env \"SSH_USER_SHELL=${SSH_USER_SHELL}\" \
      --env \"SSH_USER_ID=${SSH_USER_ID}\" \
      ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}; \
  fi"

# Shutdown
ExecStop=/usr/bin/docker stop --time 10 %p.%i

[Install]
WantedBy=multi-user.target

[X-Fleet]
Conflicts=%p@*.%i.service
